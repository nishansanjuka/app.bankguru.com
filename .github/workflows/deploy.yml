name: Deploy to Production

on:
  push:
    branches:
      - main

permissions:
  contents: read
  deployments: write

jobs:
  deploy:
    name: Deploy to Vercel and Update Deployment Status
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq (JSON parser)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Create GitHub Deployment
        id: create_deployment
        run: |
          response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/deployments \
            -d '{"ref":"'"${{ github.sha }}"'","environment":"production","auto_merge":false}')
          echo "$response"
          http_status=$(echo "$response" | tr -d '\r' | sed -n 's/.*HTTP_STATUS:\([0-9]*\)$/\1/p')
          if [ "$http_status" != "201" ]; then
            echo "Deployment creation failed with status $http_status"
            exit 1
          fi
          deployment_id=$(echo "$response" | sed '$d' | jq -r '.id')
          echo "deployment_id=$deployment_id" >> $GITHUB_OUTPUT

      - name: Deploy to Vercel (with build)
        id: vercel_deploy
        run: |
          echo "üöÄ Deploying to Vercel Production..."
          url=$(vercel --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "deploy_url=$url" >> $GITHUB_OUTPUT
          echo ""
          echo "‚úÖ Deployment Successful!"
          echo "üåê Production URL: $url"
          echo "üìù Commit: ${{ github.sha }}"
          echo "‚è±Ô∏è Deployed at: $(date)"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          MAIN_API_URL: ${{ secrets.MAIN_API_URL }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          NEXT_PUBLIC_CLERK_SIGN_IN_URL: ${{ secrets.NEXT_PUBLIC_CLERK_SIGN_IN_URL }}
          NEXT_PUBLIC_CLERK_SIGN_UP_URL: ${{ secrets.NEXT_PUBLIC_CLERK_SIGN_UP_URL }}
          CLERK_WEBHOOK_SECRET: ${{ secrets.CLERK_WEBHOOK_SECRET }}
          DEFAULT_INSTITUTION_TYPE_ID: ${{ secrets.DEFAULT_INSTITUTION_TYPE_ID }}
          GURUBOT_API_URL: ${{ secrets.GURUBOT_API_URL }}

      - name: Update GitHub Deployment Status with Production URL
        run: |
          curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/deployments/${{ steps.create_deployment.outputs.deployment_id }}/statuses \
            -d '{
              "state": "success",
              "environment": "production",
              "environment_url": "'"${{ steps.vercel_deploy.outputs.deploy_url }}"'",
              "log_url": "'"${{ steps.vercel_deploy.outputs.deploy_url }}/logs"'"
            }'
